swagger: "2.0"
info:
  $ref: "common/info.yaml#/info"

externalDocs:
  $ref: "common/info.yaml#/externalDocs"

tags:
  $ref: "common/info.yaml#/tags"

host: "petstore.swagger.io"
basePath: "/v2"

schemes:
  - "http"

paths:
  
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"

  /user/createWithArray:
    post:
      tags:
        - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of user object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"

  /user/createWithList:
    post:
      tags:
        - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of user object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"

  /user/{username}:

    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"

    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"

    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"

definitions:

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
